<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kbxtu.github.io/</id>
    <title>kuangbin</title>
    <updated>2020-08-21T08:48:04.659Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kbxtu.github.io/"/>
    <link rel="self" href="https://kbxtu.github.io/atom.xml"/>
    <subtitle>希望你比冬天先到</subtitle>
    <logo>https://kbxtu.github.io/images/avatar.png</logo>
    <icon>https://kbxtu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, kuangbin</rights>
    <entry>
        <title type="html"><![CDATA[CodeForces #664F - Boboniu and String]]></title>
        <id>https://kbxtu.github.io/post/codeforces-664f-boboniu-and-string/</id>
        <link href="https://kbxtu.github.io/post/codeforces-664f-boboniu-and-string/">
        </link>
        <updated>2020-08-21T08:14:25.000Z</updated>
        <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/1395/problem/F">传送门</a></p>
<h1 id="题意">题意</h1>
<p>给定n个由B和N组成的字符串s1，s2……sn，一个字符串每次可以做以下操作中的一个<br>
1.删除或增加一个B<br>
2.删除或增加一个N<br>
3.删除或增加一个BN<br>
4.删除或增加一个NB<br>
求一个由N,B组成的字符串t，要求t转换到所有字符串s的操作次数的最大值最小，使得t与s的B,N字符数量相等。</p>
<h1 id="思路">思路</h1>
<p>首先一个字符串与其 N、B 的顺序无关，只与 N、B 的数量有关，所以可以表示为平面上一个点 (xi,yi)<br>
求最大值最小考虑二分，这个也很平凡。然后两个点的距离的定义也很显然：<br>
<img src="https://kbxtu.github.io//post-images/1597999553660.png" alt="" loading="lazy"><br>
<img src="https://kbxtu.github.io//post-images/1597999613142.png" alt="" loading="lazy"></p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
using namespace std;
#define inf 0x3f3f3f3f
#define ll long long
#define maxn 500005
#define mod 998244353
ll maxa=0,mina=inf,maxb=0,minb=inf,mxd=-inf,mnd=inf;
ll ansb=0,ansn=0;
char s[maxn];

bool check(ll mid){
    ll minx=max(0ll,maxa-mid),maxx=mina+mid,miny=max(0ll,maxb-mid),maxy=minb+mid,maxd=mnd+mid,mind=mxd-mid;
    if(minx&gt;maxx||miny&gt;maxy||mind&gt;maxd) return false;
    if(miny-maxx&gt;maxd||maxy-minx&lt;mind) return false;
    if((maxd&gt;=maxy-maxx)&amp;&amp;(mind&lt;=maxy-maxx)) ansn=maxx,ansb=maxy;
    else if(mind&gt;=maxy-maxx) ansb=maxy,ansn=maxy-mind;
    else{
        ansn=maxx,ansb=maxx+maxd;
    }
    /*if (maxd &gt;= maxy - minx &amp;&amp; mind &lt;= miny - maxx) ansn=maxx, ansb=maxy;
    else if (maxd &lt;= maxy - maxx) ansn=maxx, ansb=maxx + maxd;
    else if (maxd &lt;= maxy - minx) ansn=maxy - maxd, ansb=maxy;
    else if (mind &gt;= maxy - maxx) ansn=maxy - mind, ansb=maxy;
    else if (mind &gt;= miny - maxx) ansn=maxx, ansb=maxx + mind;*/
    return true;
}

int main(){
    ll i, n, j, k, t;
    scanf(&quot;%lld&quot;,&amp;n);
    for(i=1;i&lt;=n;i++){
        scanf(&quot;%s&quot;,s);
        k=strlen(s);
        ll a=0,b=0;
        for(j=0;j&lt;k;j++){
            if(s[j]=='N') a++;
            else b++;
        }
        mina=min(mina,a),maxa=max(a,maxa);
        minb=min(minb,b),maxb=max(b,maxb);
        mxd=max(mxd,b-a),mnd=min(mnd,b-a);
    }
    ll l=0,r=500005;
    while(l&lt;r){
        ll mid=(l+r)&gt;&gt;1;
        if(check(mid)) r=mid;
        else l=mid+1;
    }
    check(l);
    printf(&quot;%lld\n&quot;,l);
    for(i=1;i&lt;=ansb;i++) printf(&quot;B&quot;);
    for(i=1;i&lt;=ansn;i++) printf(&quot;N&quot;);
    printf(&quot;\n&quot;);
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CodeForces #664E - Boboniu Walks on Graph]]></title>
        <id>https://kbxtu.github.io/post/codeforces-664e-boboniu-walks-on-graph/</id>
        <link href="https://kbxtu.github.io/post/codeforces-664e-boboniu-walks-on-graph/">
        </link>
        <updated>2020-08-21T03:21:04.000Z</updated>
        <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/1395/problem/E">传送门</a></p>
<h1 id="题意">题意</h1>
<p>给定一个n个点m条边的有向图，每一个点的出度最多为k，然后给你一个跑图规则数组ci，对于出度为x的点，跑当前点第cx小的边。问你有多少种数组c，可以使得对于任何点，总能沿着数组c跑，跑回该点。</p>
<h1 id="思路">思路</h1>
<p>根据规则转换一下，对于所有点，它的出边都是固定的。所以每一个都在且仅在一个有向环内，即所有点都仅经过一次。可以看到k&lt;=9,因此我们枚举所有的c数组，符合条件的计上。跑图的过程用点权hash来计算。</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
using namespace std;
#define inf 0x3f3f3f3f
#define ll long long
#define maxn 100005
#define mod 1000000007
ll s[maxn&lt;&lt;1][2],node[maxn&lt;&lt;1],sum[10][10],n,m,k,per[maxn],ans=0,res=0;
vector&lt;ll&gt; G[maxn&lt;&lt;1];
int vis[maxn];
void check(){
    ll cnt=0;
    for(int i=1;i&lt;=k;i++)
        cnt+=sum[i][per[i]];
    if(ans==cnt) res++;
}
void dfs(int x){
    if(x&gt;k){
        check();
		return; 
    }
    for(int i=1;i&lt;=x;i++){
		per[x]=i;
	    dfs(x+1);
	}
	return;
}

int main(){
    ll i,j,t,u,v,w;
    scanf(&quot;%lld%lld%lld&quot;,&amp;n,&amp;m,&amp;k);
    for(i=1;i&lt;=m;i++){
        scanf(&quot;%lld%lld%lld&quot;,&amp;u,&amp;v,&amp;w);
        s[w][0]=u,s[w][1]=v;
    }
    for(i=1;i&lt;=m;i++) G[s[i][0]].push_back(s[i][1]);
    for(i=1;i&lt;=n;i++) node[i]=rand()%mod,ans+=node[i];
    for(i=1;i&lt;=n;i++)
        for(j=0;j&lt;G[i].size();j++)
            sum[G[i].size()][j+1]+=node[G[i][j]];
    dfs(1);
    printf(&quot;%lld\n&quot;,res);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CodeForces #664D - Boboniu Chats with Du]]></title>
        <id>https://kbxtu.github.io/post/codeforces-664d-boboniu-chats-with-du/</id>
        <link href="https://kbxtu.github.io/post/codeforces-664d-boboniu-chats-with-du/">
        </link>
        <updated>2020-08-21T02:40:04.000Z</updated>
        <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/1395/problem/D">传送门</a></p>
<h1 id="题意">题意</h1>
<p>n个数，对于每个数ai，如果ai&gt;m,则接下来d个数无法计算，否则计算进总值，求可得的最大总值。</p>
<h1 id="思路">思路</h1>
<p>因为n，d小于1e5，可以考虑暴力枚举，这道题比较巧妙的是他枚举的是ai&gt;m的次数，并从大到小枚举，而用前缀和每次计算都是o(1)的效率，暴力枚举取x个大于m的，那么会消耗(x−1)(d+1)+1天，剩余的天数如果能取&lt;m的，全部取&lt;m的肯定是最优的</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
using namespace std;
#define inf 0x3f3f3f3f
#define ll long long
#define maxn 100005
#define mod 998244353
ll a[maxn],b[maxn];

bool cmp(ll x,ll y){
    return x&gt;y;
}

int main(){
    ll i, n, j, k, t, m,d;
    scanf(&quot;%lld%lld%lld&quot;,&amp;n,&amp;d,&amp;m);
    ll cura=0,curb=0;
    for(i=1;i&lt;=n;i++){
        scanf(&quot;%lld&quot;,&amp;k);
        if(k&gt;m)
            a[++cura]=k;
        else b[++curb]=k;
    }
    sort(a+1,a+1+cura,cmp);
    for(i=2;i&lt;=cura;i++) a[i]+=a[i-1];
    sort(b+1,b+1+curb,cmp);
    for(i=2;i&lt;=n;i++) b[i]+=b[i-1];
    ll ans=b[n];
    for(i=1;i&lt;=cura;i++){
        j=(i-1)*(d+1)+1;
        if(j&gt;n) break;
        ans=max(ans,a[i]+b[n-j]);
    }
    printf(&quot;%lld\n&quot;,ans);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codeforces #664 C Boboniu and Bit Operations]]></title>
        <id>https://kbxtu.github.io/post/boboniu-and-bit-operations/</id>
        <link href="https://kbxtu.github.io/post/boboniu-and-bit-operations/">
        </link>
        <updated>2020-08-21T02:08:36.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="http://codeforces.com/contest/1395/problem/C">传送门</a></p>
<h1 id="题意">题意</h1>
<p>数组a和b，问1&lt;=a&lt;=n,1&lt;=j&lt;=m,将所有的ci=a[i]&amp;b[j]取或的最小值为多少，i每个只取一次，j每个可以取任意次。</p>
<h1 id="思路">思路</h1>
<p>暴力枚举，可以先把答案ans置为2^9-1,然后枚举每一数位上的1，看置为0后是否有满足的c数组存在，如果存在即合理。注意是要从高数位开始枚举，因为低位开始枚举的话，不能保证答案是最小值</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
using namespace std;
#define inf 0x3f3f3f3f
#define ll long long
#define maxn 100005
#define mod 998244353
int a[202],b[202],c[202],n,m,ans;

bool jud(int x){
    for(int i=1;i&lt;=n;i++){
        bool flag=false;
        for(int j=1;j&lt;=m;j++){
            if(((a[i]&amp;b[j])|x)==x){
                flag=true;
                break;
            }
        }
        if(!flag) return false;
    }
    return true;
}

int main(){
    int i, j, k, t;
    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
    for(i=1;i&lt;=n;i++) scanf(&quot;%d&quot;,&amp;a[i]);
    for(i=1;i&lt;=m;i++) scanf(&quot;%d&quot;,&amp;b[i]);
    int ans=(1&lt;&lt;10)-1;
    for(i=9;i&gt;=0;i--)
        if(jud(ans^(1&lt;&lt;i))) ans^=(1&lt;&lt;i);
    printf(&quot;%d\n&quot;,ans);
}
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/1395/problem/C">传送门</a></p>
<h1 id="题意">题意</h1>
<p>数组a和b，问1&lt;=a&lt;=n,1&lt;=j&lt;=m,将所有的ci=a[i]&amp;b[j]取或的最小值为多少，i每个只取一次，j每个可以取任意次。</p>
<h1 id="思路">思路</h1>
<p>暴力枚举，可以先把答案ans置为2^9-1,然后枚举每一数位上的1，看置为0后是否有满足的c数组存在，如果存在即合理。注意是要从高数位开始枚举，因为低位开始枚举的话，不能保证答案是最小值</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
using namespace std;
#define inf 0x3f3f3f3f
#define ll long long
#define maxn 100005
#define mod 998244353
int a[202],b[202],c[202],n,m,ans;

bool jud(int x){
    for(int i=1;i&lt;=n;i++){
        bool flag=false;
        for(int j=1;j&lt;=m;j++){
            if(((a[i]&amp;b[j])|x)==x){
                flag=true;
                break;
            }
        }
        if(!flag) return false;
    }
    return true;
}

int main(){
    int i, j, k, t;
    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
    for(i=1;i&lt;=n;i++) scanf(&quot;%d&quot;,&amp;a[i]);
    for(i=1;i&lt;=m;i++) scanf(&quot;%d&quot;,&amp;b[i]);
    int ans=(1&lt;&lt;10)-1;
    for(i=9;i&gt;=0;i--)
        if(jud(ans^(1&lt;&lt;i))) ans^=(1&lt;&lt;i);
    printf(&quot;%d\n&quot;,ans);
}
&lt;!-- more --&gt;

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[线性求乘法逆元]]></title>
        <id>https://kbxtu.github.io/post/xian-xing-qiu-cheng-fa-ni-yuan/</id>
        <link href="https://kbxtu.github.io/post/xian-xing-qiu-cheng-fa-ni-yuan/">
        </link>
        <updated>2020-08-15T03:38:46.000Z</updated>
        <content type="html"><![CDATA[<p>用于求一连串数字对于一个 mod p的逆元。如果只是求一个数的逆元建议使用费马小定理或扩展欧几里德定理。<br>
线性算法求逆元的原理：<br>
已知， (1/1)≡1 (mod p) , 设 p=k∗i+r,(1&lt;r&lt;i&lt;p) ， 即k 是 p/i的商 ， r 是 p/i 的余数。<br>
即 k∗i+r≡0 (mod p)。 ≡左右两边同时乘上(1/i)*(1/r) ， 即 k * (1/r) + (1/i) ≡0 (modp) 。<br>
移项可得 ， (1/i) ≡ - k * (1/r) (mod p) 。<br>
即 （1/i） ≡ (-p/i) * (1/(p%i)) (mod p) 。<br>
即 inv[i] ≡ （long long）(-p/i + p) * inv[p%i] (mod p) 。</p>
<p>源码如下所示：</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;cstdio&gt;
using namespace std;
const int maxn = 3e6+10;
int inv[maxn];

int main(){
	int n,p;
	cin &gt;&gt; n &gt;&gt; p;
	inv[1] = 1;
	cout &lt;&lt; inv[1] &lt;&lt; endl;
	for(int i = 2;i &lt;= n;i++){
		inv[i] = (long long)(-p/i+p)*inv[p%i]%p;
		printf(&quot;%d\n&quot;,inv[i]);
	}
	return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020杭电多校7 hdu6853 Jogging]]></title>
        <id>https://kbxtu.github.io/post/2020-hang-dian-duo-xiao-7-hdu6853-jogging/</id>
        <link href="https://kbxtu.github.io/post/2020-hang-dian-duo-xiao-7-hdu6853-jogging/">
        </link>
        <updated>2020-08-14T03:48:31.000Z</updated>
        <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6853">传送门</a></p>
<h1 id="题意">题意</h1>
<p>好点集合的定义如下，对于一个点（x,y），如果gcd(x,y)&gt;1，则为好点。<br>
给你一个点，从该点开始，等可能的前往周围的八个方向的好点，或停留在原地。<br>
问你走过无穷步之后，回到初始点的概率是多少</p>
<h1 id="思路">思路</h1>
<p><img src="https://kbxtu.github.io//post-images/1597379404888.png" alt="" loading="lazy"><br>
“图上随机游走”算法结论就是在建出无向图后，答案就是 “起点的度数 + 1 ” 除以 “总度数 + n”</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;set&gt;
using namespace std;
#define inf 0x3f3f3f3f
#define ll long long
#define maxn 20005
#define mod 998244353
ll gcd(ll x,ll y){
    return !y?x:gcd(y,x%y);
}
struct node{
    ll u,v;
    bool operator&lt;(const node &amp;x)const{
        if(u!=x.u) return u&lt;x.u;
        return v&lt;x.v;
    }
}tmp,tmp1;
ll pos[9][2]={{0,1},{0,-1},{-1,0},{-1,-1},{-1,1},{1,-1},{1,0},{1,1}};
int main(){
    ll i, j, k, t, n, x, y;
    scanf(&quot;%lld&quot;,&amp;t);
    while(t--){
        set&lt;node&gt; s;    
        ll sum=0,chu=0;
        scanf(&quot;%lld%lld&quot;,&amp;tmp.u,&amp;tmp.v);
        if(tmp.u==tmp.v){
        	printf(&quot;0/1\n&quot;);
        	continue;
		} 
        int flag=0;
        queue&lt;node&gt; q;
        q.push(tmp);
        s.insert(tmp);
        while(!q.empty()){
            tmp=q.front();
            q.pop();
            sum++; 
            for(i=0;i&lt;8;i++){
                tmp1.u=tmp.u+pos[i][0];
                tmp1.v=tmp.v+pos[i][1];
                if(tmp1.u==tmp1.v){
                    flag=1;break;
                } 
                if(gcd(tmp1.u,tmp1.v)==1) continue;
                sum++;
                if(s.count(tmp1)) continue;
                s.insert(tmp1);
                q.push(tmp1);
            }
            if(flag) break;
            if(!chu) chu=sum;
        }
        if(flag){
        	printf(&quot;0/1\n&quot;);
        	continue;
		} 
        ll g=gcd(chu,sum);
        printf(&quot;%lld/%lld\n&quot;,chu/g,sum/g);
    }
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020杭电多校7 hdu6850 Game]]></title>
        <id>https://kbxtu.github.io/post/hdu6850/</id>
        <link href="https://kbxtu.github.io/post/hdu6850/">
        </link>
        <updated>2020-08-13T02:13:35.000Z</updated>
        <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6850">传送门</a></p>
<h1 id="题意">题意</h1>
<p>给你一堆点，石子在给出的第一个点，两个人互相移动石子，要求每一次移动的距离大于上一次的距离，</p>
<h1 id="思路">思路</h1>
<p>博弈论，比赛前由于刚学的SG函数，没太会应用，一直在考虑点结束，其实看了题应该明白这道题是边结束。<br>
首先可以建立一个完全图，边权值为两点的距离。考虑最长边，如果一个人选到了这条边，则下一个人必胜。然后我们考虑次长边……这样即把问题分割成了一个子问题。<br>
每次选取最长边，然后把该边两点标记，再选取图中下一条非标记点的最长边。如果在此过程中标记了1，意味着从1开始的先手可以选当标记了1的最长边，必胜。由于这种取法至多只剩下一个点未被标记，因为点数大于1时，意味则这两点间距离可选。所以如果最后只剩下1未被选，则意味着先手无论选哪个点，后手都能选到该点的最长边，必败。</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
using namespace std;
#define inf 0x3f3f3f3f
#define ll long long
#define maxn 2005
#define mod 998244353
struct node{
    ll x,y;
}a[maxn];
struct node1{
    ll x,y,r;
}dis[maxn*maxn];
bool cmp(node1 x,node1 y){
    return x.r&gt;y.r;
}

int main(){
    int i, j, k, t, n;
    scanf(&quot;%d&quot;,&amp;t);
    while(t--){
        int cur=0;
        scanf(&quot;%d&quot;,&amp;n);
        int vis[maxn]={0};
        for(i=1;i&lt;=n;i++){
            scanf(&quot;%lld%lld&quot;,&amp;a[i].x,&amp;a[i].y);
            for(j=1;j&lt;i;j++){
                ll r=(a[j].x-a[i].x)*(a[j].x-a[i].x)+(a[j].y-a[i].y)*(a[j].y-a[i].y);
                dis[++cur].r=r;
                dis[cur].x=j;
                dis[cur].y=i;
            }
        }
        sort(dis+1,dis+1+cur,cmp);
        for(i=1;i&lt;=cur;i++){
            ll x=dis[i].x,y=dis[i].y,r=dis[i].r;
            if(vis[x]||vis[y]) continue;
            j=i+1;
            vis[x]=vis[y]=i;
            while(j&lt;=cur&amp;&amp;r==dis[j].r){
            	if((!vis[dis[j].x]||vis[dis[j].x]==i)&amp;&amp;(!vis[dis[j].y]||vis[dis[j].y]==i)){
            		vis[dis[j].x]=vis[dis[j].y]=i;
                	
				}
                j++;
            }
            i=j-1;
            if(vis[1]) break;
        }
        if(vis[1]) printf(&quot;YES\n&quot;);
        else printf(&quot;NO\n&quot;);
    }
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[NOIP训练营内部试题-数数（树形DP+倍增）]]></title>
        <id>https://kbxtu.github.io/post/noip-xun-lian-ying-nei-bu-shi-ti-shu-shu-shu-xing-dpbei-zeng/</id>
        <link href="https://kbxtu.github.io/post/noip-xun-lian-ying-nei-bu-shi-ti-shu-shu-shu-xing-dpbei-zeng/">
        </link>
        <updated>2020-08-07T01:07:34.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>清北学堂NOIP训练营试题T3试题<br>
<img src="https://kbxtu.github.io//post-images/1596763009580.jpg" alt="" loading="lazy"><br>
样例读入：<br>
4<br>
1 2<br>
1 3<br>
2 4<br>
样例输出：<br>
8<br>
样例解释：<br>
<img src="https://kbxtu.github.io//post-images/1596763033186.jpg" alt="" loading="lazy"></p>
</blockquote>
<h1 id="思路">思路</h1>
<p>首先看到二进制和最近公共祖先可以想到这题可以用倍增做，从大到小枚举k，只要不越界就跳，最后一定能</p>
<p>跳到LCA（注意是是从大到小跳，不能随意改变顺序跳，因为要注意算重复的问题），因为跳的都是2的幂次</p>
<p>步，所以每跳一步就是二进制加了一个1。先预处理lca[i][k],表示点i向上跳2^k 步的祖先节点。</p>
<p>设 f[i][j] 表示最后一步跳了2^j步，跳到了点i的点的二进制1数量之和</p>
<p>cnt[i][j] 表示最后一步跳了2^j步，跳到了点i的点数</p>
<p>因为有了倍增求lCA原理的保证，所以只需要考虑跳2的幂次步</p>
<p>设sons[i]表示以i为根的子树的大小</p>
<p>nxt[i]=j 表示当前点属于i的子树里，以j为根节点的子树</p>
<p>假设dfs回溯到x，转移分两种：</p>
<p>1、以x为链的一个端点</p>
<p>枚举x向上跳2^j次，则v=lca[x][j]</p>
<p>那么ans+=sons[v]-ssons[nxt[v]] ——所有非rt[v]子树的点，与x的LCA都是v，都会有1的贡献</p>
<p>（类似于点分治中要去除同一子树内合法的点）</p>
<p>cnt[v][k]++， f[v][k]++</p>
<p>2、x作为倍增过程中的一个中途点</p>
<p>那么枚举最后一步跳了2^i 跳到了x</p>
<p>枚举x再往上跳2^j步,则v=fa[x][j]</p>
<p>那么ans+=（f[x][i]+cnt[x][i]）*（siz[v]-siz[rt[v]]）</p>
<p>f[x][i] 是原来的答案，在以v做LCA时，又会用 （siz[v]-siz[rt[v]]）次</p>
<p>cnt[x][i] 是要再往上跳2^j步，每个点又有一个1的贡献</p>
<p>cnt[v][j]+=cnt[x][i] ，f[v][j]+=f[x][i]+cnt[x][i]</p>
<p>例：1--2--3--4 如果4到1的距离为3，二进制为11，对答案的贡献为2</p>
<p>回溯到4的时候，以4为端点会累积3--4 2--4</p>
<p>回溯到3的时候，以3为端点会累积2--3 1--3</p>
<p>回溯到2的时候，以2为端点会累积1--2，以2为中途点会累积1--2--3--4</p>
<p>（4跳2<sup>1累积到2里，然后在枚举2为中途点时，最后一步跳了2</sup>1到2,2再往上跳2^0）</p>
<p>为什么在枚举3作为中途点的时候，不枚举跳了2^0次方到了3</p>
<p>因为此时3不是中途点，我们是按跳2^k，k是降序跳的</p>
<p>个人总结：支持本题不重不漏的原理就是倍增求LCA的原理</p>
<p>或者是说任意数可以拆为2<sup>k1+2</sup>k2+2^k3…… ki 依次递减</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;string&gt;
#include &lt;cmath&gt;
#include &lt;vector&gt;
#define st first
#define nd second
using namespace std;
struct edge {
	int x;
	int nxt;
};
typedef long long LL;
const int N = 1E5 + 10;
edge e[2*N];
int lca[N][17], hd[N], fa[N], sons[N], nxt[N], cnt[N][17], f[N][17];
int n, m, x, y, l;// cnt[x][j]是最后一步跳2^j次方步来到x的点数 
LL ans;// f[x][j]是最后一步跳2^j次方步来到x的点上总共的1的数目 
void link(int x, int y){
	e[++l].x = y;
	e[l].nxt = hd[x];
	hd[x] = l;
}
void dfs_lca(int x) {
	lca[x][0] = fa[x];
	sons[x] = 1;
	for (int i = 1; i &lt;= 16; ++i)
	lca[x][i] = lca[lca[x][i - 1]][i - 1];
	for (int p = hd[x]; p; p = e[p].nxt)
		if(e[p].x != fa[x]){
			fa[e[p].x] = x;
			dfs_lca(e[p].x);
			sons[x] += sons[e[p].x];
		}
}

void dfs_ans(int x) {
	for (int p=hd[x]; p; p=e[p].nxt)
		if(e[p].x!=fa[x]) nxt[x]=e[p].x,dfs_ans(e[p].x);
	for (int i = 0; i &lt;= 16; ++i){ //x作为链条的一端，所以每次只加一 
		ans+=sons[lca[x][i]]-sons[nxt[lca[x][i]]];  //链端的点，只加一次 
		//if(sons[lca[x][i]] - sons[nxt[lca[x][i]]]) 
		//	printf(&quot;%d : sons[%d]-sons[%d]=%d\n&quot;,x,lca[x][i],nxt[lca[x][i]],sons[lca[x][i]]-sons[nxt[lca[x][i]]]);
		cnt[lca[x][i]][i]++;
		f[lca[x][i]][i]++;
	}//降序枚举，不重不漏 
	for (int i = 1; i &lt;= 16; ++i)  //x作为倍增的中途点，每一次要把之前来的也要加上 
		for (int j = 0; j &lt;= i - 1; ++j){//并且倍增到lca[x][j]时还要把当前点数和当前点再加一次 
			ans+=LL(cnt[x][i]+ f[x][i])*LL(sons[lca[x][j]]-sons[nxt[lca[x][j]]]);
			//if(LL(cnt[x][i]+f[x][i])*LL(sons[lca[x][j]]-sons[nxt[lca[x][j]]]))			
			//	printf(&quot;%d : cnt[%d][%d]+f[%d][%d] * sons[%d]-sons[%d] = %I64d\n&quot;,x,x,i,x,i,lca[x][j],nxt[lca[x][j]],LL(cnt[x][i] + f[x][i]) * LL(sons[lca[x][j]] - sons[nxt[lca[x][j]]]));			
			cnt[lca[x][j]][j]+=cnt[x][i];
			f[lca[x][j]][j]+=f[x][i]+cnt[x][i];
		}
}

int main(){
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 1; i &lt; n; ++i){
		scanf(&quot;%d%d&quot;, &amp;x, &amp;y);
		link(x, y);
		link(y, x);
	}
	dfs_lca(1);
	sons[0] = sons[1];
	nxt[0] = 1;
	dfs_ans(1);
	printf(&quot;%I64d\n&quot;, ans);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[洛谷 P1967 货车运输 NOIP2013]]></title>
        <id>https://kbxtu.github.io/post/luo-gu-p1967-huo-che-yun-shu-noip2013/</id>
        <link href="https://kbxtu.github.io/post/luo-gu-p1967-huo-che-yun-shu-noip2013/">
        </link>
        <updated>2020-08-05T08:24:08.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1967">传送门</a></p>
<h1 id="思路">思路</h1>
<p>首先建图，题目有重边，可建一棵最大生成树。给出的n有1e4，用floyd算法时间复杂度为n^3, 空间复杂度为n^2.因此需要用lca和树上倍增dp来做，如果询问的x，y不在一棵树上就输出-1，否则就跑个lca.</p>
<p>#代码</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;cstdio&gt;
#include &lt;queue&gt;
#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
using namespace std;
#define inf 0x3f3f3f3f
#define ll long long
#define maxn 100005
#define mod 998244353
struct Edge{
    int to,next,w;
}edge[maxn];
struct e{
    int u,v,w;
}edge1[maxn];
int cnt,head[maxn],w[maxn][21],fa[maxn],f[maxn][21],n,m,dep[maxn];
void add_edge(int u,int v,int w){
    edge[cnt].to=v;
    edge[cnt].w=w;
    edge[cnt].next=head[u];
    head[u]=cnt++;
    edge[cnt].to=u;
    edge[cnt].w=w;
    edge[cnt].next=head[v];
    head[v]=cnt++;
}
bool cmp(e a,e b){
    return a.w&gt;b.w;
}
void init(){
    cnt=0; 
    for(int i=0;i&lt;=n;i++){
		head[i]=-1,fa[i]=i;
	} 
}
int find(int x){
    return fa[x]==x?x:(fa[x]=find(fa[x]));
}
int lca(int x,int y){
    int i,ans=inf;
    if(dep[x]&gt;dep[y]) swap(x,y);
    for(i=20;i&gt;=0;i--){
        if(dep[f[y][i]]&gt;=dep[x]) ans=min(ans,w[y][i]),y=f[y][i];
        if(x==y) return ans;
    }
    for(i=20;i&gt;=0;i--){
        if(f[x][i]!=f[y][i]){
            ans=min(ans,min(w[x][i],w[y][i]));
            x=f[x][i],y=f[y][i];
        }
    }
    return min(ans,min(w[x][0],w[y][0]));
}
void build(){
    for(int i=1;i&lt;=m;i++){
        int u=edge1[i].u,v=edge1[i].v;
        int fu=find(u),fv=find(v);
        if(fu==fv) continue;
        add_edge(u,v,edge1[i].w);
        fa[fv]=fu;
    }
}
void dfs(int x){
    int i,j;
    for(i=head[x];i!=-1;i=edge[i].next){
        int v=edge[i].to,ww=edge[i].w;
        if(dep[v]) continue;
        dep[v]=dep[x]+1;
		w[v][0]=ww;
		f[v][0]=x;
        for(j=1;(1&lt;&lt;j)&lt;dep[v];j++) f[v][j]=f[f[v][j-1]][j-1],w[v][j]=min(w[v][j-1],w[f[v][j-1]][j-1]);
        dfs(v);
    }
}

int main(){
    int i, j, k, t;
    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
    int u, v;
    init();
    for(i=1;i&lt;=m;i++)
        scanf(&quot;%d%d%d&quot;,&amp;edge1[i].u,&amp;edge1[i].v,&amp;edge1[i].w);
    sort(edge1+1,edge1+m+1,cmp);
    build();
    for(i=1;i&lt;=n;i++){
        if(dep[i]) continue;
        dep[i]=1;
        dfs(i);
    }
    scanf(&quot;%d&quot;,&amp;t);
    while(t--){
        scanf(&quot;%d %d&quot;,&amp;u,&amp;v);
        if(find(u)!=find(v)){
            printf(&quot;-1\n&quot;);
            continue;
        }
        printf(&quot;%d\n&quot;,lca(u,v));
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codeforces Round #659 (Div. 2) B2 - Koa and the Beach (Hard Version)]]></title>
        <id>https://kbxtu.github.io/post/codeforces-round-659-div-2-b2-koa-and-the-beach-hard-version/</id>
        <link href="https://kbxtu.github.io/post/codeforces-round-659-div-2-b2-koa-and-the-beach-hard-version/">
        </link>
        <updated>2020-08-02T13:18:18.000Z</updated>
        <content type="html"><![CDATA[<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;
const int N=3e5+5;
int a[N];
void solve(){
	int n,k,l,i;
	scanf(&quot;%d%d%d&quot;,&amp;n,&amp;k,&amp;l);
	a[0]=a[n+1]=k+1;
	for(i=1;i&lt;=n;i++)
		scanf(&quot;%d&quot;,&amp;a[i]),
		a[i]=l-a[i];//a数组存放上涨a[i]后依然能通过
	int w=k+1,f=-1;//w表示当前潮汐高度f表示下一秒潮汐变化的数字
	for(i=1;i&lt;=n;i++){
		if(a[i]&lt;0){printf(&quot;No\n&quot;);return;}//无法通过
		else if(a[i]&gt;=k)w=k+1,f=-1;//若潮汐在最高处时这个点还是安全的，可以在这个点等到潮最高时
		else if(f==-1)w=min(w+f,a[i]);//只要当前是潮落的状态就可以等待
		else{w+=f;if(w&gt;a[i]){printf(&quot;No\n&quot;);return;}}//若是涨潮状态这个点已经不安全了则说明这个点无法通过
		if(w==0)f=1;
	}
	printf(&quot;Yes\n&quot;);
}
 
int main(){
	int T;
	scanf(&quot;%d&quot;,&amp;T);
	while(T--)solve();
	return 0;
}

</code></pre>
]]></content>
    </entry>
</feed>